name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

permissions:
  contents: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Format check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Run 'go fmt ./...' to fix."
            gofmt -s -l .
            exit 1
          fi

      - name: Vet
        run: go vet ./...

      - name: Run tests
        run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

  build:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe
          - goos: freebsd
            goarch: amd64
            suffix: freebsd-amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          # Create build directory
          mkdir -p dist
          
          # Set binary name based on OS
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="proxydav-${{ steps.get_version.outputs.VERSION }}-${{ matrix.suffix }}"
          else
            BINARY_NAME="proxydav-${{ steps.get_version.outputs.VERSION }}-${{ matrix.suffix }}"
          fi
          
          # Build the binary with version info
          go build \
            -ldflags "-X main.version=${{ steps.get_version.outputs.VERSION }} -X main.commit=${{ github.sha }} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ) -w -s" \
            -o "dist/${BINARY_NAME}" \
            ./cmd/proxydav

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: proxydav-${{ matrix.suffix }}
          path: dist/*

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Prepare release assets
        run: |
          # Flatten the artifact directory structure
          find dist -name "proxydav-*" -type f -exec mv {} dist/ \;
          
          # Remove empty directories
          find dist -type d -empty -delete
          
          # List all files for verification
          ls -la dist/

      - name: Generate release notes
        id: release_notes
        run: |
          # Extract changelog for this version if it exists
          if [ -f "CHANGELOG.md" ]; then
            # Try to extract version-specific changelog
            awk '/^## \[?'"${{ steps.get_version.outputs.VERSION }}"'\]?/{flag=1; next} /^## /{flag=0} flag' CHANGELOG.md > release_notes.txt
            if [ ! -s release_notes.txt ]; then
              echo "Release ${{ steps.get_version.outputs.VERSION }}" > release_notes.txt
              echo "" >> release_notes.txt
              echo "Built from commit: ${{ github.sha }}" >> release_notes.txt
            fi
          else
            echo "Release ${{ steps.get_version.outputs.VERSION }}" > release_notes.txt
            echo "" >> release_notes.txt
            echo "Built from commit: ${{ github.sha }}" >> release_notes.txt
            echo "" >> release_notes.txt
            echo "### Changes" >> release_notes.txt
            echo "See commit history for detailed changes." >> release_notes.txt
          fi
          
          # Add binary information
          echo "" >> release_notes.txt
          echo "### Binaries" >> release_notes.txt
          echo "This release includes binaries for:" >> release_notes.txt
          echo "- Linux (amd64, arm64)" >> release_notes.txt
          echo "- macOS (amd64, arm64)" >> release_notes.txt
          echo "- Windows (amd64)" >> release_notes.txt
          echo "- FreeBSD (amd64)" >> release_notes.txt

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body_path: release_notes.txt
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}
          files: dist/proxydav-*
          token: ${{ secrets.GITHUB_TOKEN }}
